#!/bin/bash

# edit here for running without user namespace support:
CHROOT_USER=
CHROOT_GROUP=
# for running without user namespace support, you need to
# run AppRun as root, providing the user name and group name in the
# two variables defined above. 
# E.g.:
# CHROOT_USER=johndoe
# CHROOT_GROUP=johndoe


# This "AppRun" script comes as part of the "makeaoi" tool - see
# https://github.com/lvml/makeaoi for more details.
# 
# Unlike the "makeaoi.tcl" code itself, which is licensed under GPL v3,
# this "AppRun" script is licensed under LGPL v3. 
#
# (C) 2017 Lutz Vieweg
# License: LGPL v3
# GNU LESSER GENERAL PUBLIC LICENSE
# Version 3, 29 June 2007
# https://www.gnu.org/copyleft/lesser.html#content

THISDIR=$(dirname "$0")
CALLNAME=$(basename "$0")
EXEPATH=$(readlink "$THISDIR/exe_$CALLNAME")

SUPPATH="$THISDIR/aoi_support_binaries"

# we create some temporary directory where to mount our unionfs
if test "x$CHROOT_USER" == "x" ; then
	UNIONPATH=$(mktemp -d)
else
	if test "x$(whoami)" != "xroot" ; then
		echo "If you configure a certain user/group at the start of the AppRun script,"
		echo "you will need to run AppRun as root."
		exit 20
	fi 
	UNIONPATH=$(runuser -u $CHROOT_USER -- mktemp -d)
fi

# will later be assigned with actual values, defaults for finish() trap handler
UNIONFS_PID=
RETVAL=20

# define a clean-up handler we will trap into if this script
# is aborted - or called after a graceful end of the application
function finish () {

	# unmount the unionfs by killing the user process (this is the only
	# method of doing so allowed to non-privileged users, without SUID executables)
	kill -s SIGTERM $UNIONFS_PID >/dev/null 2>&1
	
	# un-trap to avoid dead-locks
	trap - SIGINT
	trap - SIGTERM
	
	# wait for unionfs to terminate
	wait $UNIONFS_PID
	
	# remove temporary mount directory
	rmdir "$UNIONPATH"
	
	exit $RETVAL
}

trap finish SIGINT
trap finish SIGTERM

if test "x$CHROOT_USER" == "x" ; then
	# mount the union filesystem, overlay "on top" of the root directory
	$SUPPATH/unionfs_static -f -o dev,relaxed_permissions "$THISDIR/root_overlay=RW:/=RW" "$UNIONPATH" &
	UNIONFS_PID=$!
else
	# mount the union filesystem, overlay "on top" of the root directory
	runuser -u $CHROOT_USER -- $SUPPATH/unionfs_static -f -o dev,allow_root "$THISDIR/root_overlay=RW:/=RW" "$UNIONPATH" &
	UNIONFS_PID=$!
fi

# wait for the unionfs command to finish mounting the filesystem
while ! test -e "$UNIONPATH/aoi_supp/mount_check" ; do
	sleep 0.1
	if ! test -e "/proc/$UNIONFS_PID" ; then
		echo "The $SUPPATH/unionfs_static process died, which probably means that"
		echo "there are problems with mounting user space filesystems (FUSE) in general"
		echo "on your system. (Or have you started $0 using 'strace'? - That won't work.)"
		echo "Alas, you will need to debug this on your own - try mounting"
		echo "some FUSE filesystem manually to see what's going wrong."
		RETVAL=20
		finish
	fi
done


if test "x$CHROOT_USER" == "x" ; then 
	# check whether user namespaces for PIDs are supported
	if test "x$($SUPPATH/unshare_static -r whoami)" != "xroot" ; then
		echo "Your system does not allow to use 'unshare -r' to create a new namespace for PIDs -"
		echo "this probably means your Linux kernel was compiled with .config option"
		echo "CONFIG_USER_NS not set."
		echo "If you want to use this Application Overlay Image anyway, please edit"
		echo "the AppRun shell script, edit the lines below the comment 'edit here"
		echo "for running without user namespace support' - requires root privileges." 
		RETVAL=20
		finish
	fi
fi

# We want ld-linux to search some paths for shared libraries that might be
# searched on the source system by default, but not on the target machine.
export LD_LIBRARY_PATH=/lib64:/usr/lib64:/usr/lib/gvfs:/usr/lib

# We remember our current working directory for the /aoi_supp/trampoline
# script to use
export AOI_PWD=$PWD

if test "x$CHROOT_USER" == "x" ; then
	# use "unshare -r" to establish a user PID namespace, as a prerequisite
	# to then "chroot" into our union filesystem, finally invoking the
	# application executable there
	$SUPPATH/unshare_static -r "$SUPPATH/chroot_static" "$UNIONPATH" /aoi_supp/trampoline "$EXEPATH" "$@"
	RETVAL=$?
else
	# if user namespace support is unavailable, we might be called as root,
	# with user id and group id given in $CHROOT_* variables
	chroot --userspec=$CHROOT_USER:$CHROOT_GROUP "$UNIONPATH" /aoi_supp/trampoline "$EXEPATH" "$@"
fi

# cleanup 
finish
